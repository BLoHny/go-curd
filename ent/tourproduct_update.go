// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blohny/ent/predicate"
	"github.com/blohny/ent/tourproduct"
)

// TourProductUpdate is the builder for updating TourProduct entities.
type TourProductUpdate struct {
	config
	hooks    []Hook
	mutation *TourProductMutation
}

// Where appends a list predicates to the TourProductUpdate builder.
func (tpu *TourProductUpdate) Where(ps ...predicate.TourProduct) *TourProductUpdate {
	tpu.mutation.Where(ps...)
	return tpu
}

// SetName sets the "name" field.
func (tpu *TourProductUpdate) SetName(s string) *TourProductUpdate {
	tpu.mutation.SetName(s)
	return tpu
}

// Mutation returns the TourProductMutation object of the builder.
func (tpu *TourProductUpdate) Mutation() *TourProductMutation {
	return tpu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tpu *TourProductUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tpu.sqlSave, tpu.mutation, tpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpu *TourProductUpdate) SaveX(ctx context.Context) int {
	affected, err := tpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tpu *TourProductUpdate) Exec(ctx context.Context) error {
	_, err := tpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpu *TourProductUpdate) ExecX(ctx context.Context) {
	if err := tpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tpu *TourProductUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tourproduct.Table, tourproduct.Columns, sqlgraph.NewFieldSpec(tourproduct.FieldID, field.TypeInt))
	if ps := tpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpu.mutation.Name(); ok {
		_spec.SetField(tourproduct.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tourproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tpu.mutation.done = true
	return n, nil
}

// TourProductUpdateOne is the builder for updating a single TourProduct entity.
type TourProductUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TourProductMutation
}

// SetName sets the "name" field.
func (tpuo *TourProductUpdateOne) SetName(s string) *TourProductUpdateOne {
	tpuo.mutation.SetName(s)
	return tpuo
}

// Mutation returns the TourProductMutation object of the builder.
func (tpuo *TourProductUpdateOne) Mutation() *TourProductMutation {
	return tpuo.mutation
}

// Where appends a list predicates to the TourProductUpdate builder.
func (tpuo *TourProductUpdateOne) Where(ps ...predicate.TourProduct) *TourProductUpdateOne {
	tpuo.mutation.Where(ps...)
	return tpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tpuo *TourProductUpdateOne) Select(field string, fields ...string) *TourProductUpdateOne {
	tpuo.fields = append([]string{field}, fields...)
	return tpuo
}

// Save executes the query and returns the updated TourProduct entity.
func (tpuo *TourProductUpdateOne) Save(ctx context.Context) (*TourProduct, error) {
	return withHooks(ctx, tpuo.sqlSave, tpuo.mutation, tpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tpuo *TourProductUpdateOne) SaveX(ctx context.Context) *TourProduct {
	node, err := tpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tpuo *TourProductUpdateOne) Exec(ctx context.Context) error {
	_, err := tpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tpuo *TourProductUpdateOne) ExecX(ctx context.Context) {
	if err := tpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tpuo *TourProductUpdateOne) sqlSave(ctx context.Context) (_node *TourProduct, err error) {
	_spec := sqlgraph.NewUpdateSpec(tourproduct.Table, tourproduct.Columns, sqlgraph.NewFieldSpec(tourproduct.FieldID, field.TypeInt))
	id, ok := tpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TourProduct.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tourproduct.FieldID)
		for _, f := range fields {
			if !tourproduct.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tourproduct.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tpuo.mutation.Name(); ok {
		_spec.SetField(tourproduct.FieldName, field.TypeString, value)
	}
	_node = &TourProduct{config: tpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tourproduct.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tpuo.mutation.done = true
	return _node, nil
}
