// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/blohny/ent/user"
)

// USER is the model entity for the USER schema.
type USER struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// IsActivated holds the value of the "isActivated" field.
	IsActivated bool `json:"isActivated,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the USERQuery when eager-loading is set.
	Edges        USEREdges `json:"edges"`
	selectValues sql.SelectValues
}

// USEREdges holds the relations/edges for other nodes in the graph.
type USEREdges struct {
	// Products holds the value of the products edge.
	Products []*TourProduct `json:"products,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProductsOrErr returns the Products value or an error if the edge
// was not loaded in eager-loading.
func (e USEREdges) ProductsOrErr() ([]*TourProduct, error) {
	if e.loadedTypes[0] {
		return e.Products, nil
	}
	return nil, &NotLoadedError{edge: "products"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*USER) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldIsActivated:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the USER fields.
func (u *USER) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldIsActivated:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isActivated", values[i])
			} else if value.Valid {
				u.IsActivated = value.Bool
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the USER.
// This includes values selected through modifiers, order, etc.
func (u *USER) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryProducts queries the "products" edge of the USER entity.
func (u *USER) QueryProducts() *TourProductQuery {
	return NewUSERClient(u.config).QueryProducts(u)
}

// Update returns a builder for updating this USER.
// Note that you need to call USER.Unwrap() before calling this method if this USER
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *USER) Update() *USERUpdateOne {
	return NewUSERClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the USER entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *USER) Unwrap() *USER {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: USER is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *USER) String() string {
	var builder strings.Builder
	builder.WriteString("USER(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("isActivated=")
	builder.WriteString(fmt.Sprintf("%v", u.IsActivated))
	builder.WriteByte(')')
	return builder.String()
}

// USERs is a parsable slice of USER.
type USERs []*USER
