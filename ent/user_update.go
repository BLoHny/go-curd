// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/blohny/ent/predicate"
	"github.com/blohny/ent/tourproduct"
	"github.com/blohny/ent/user"
)

// USERUpdate is the builder for updating USER entities.
type USERUpdate struct {
	config
	hooks    []Hook
	mutation *USERMutation
}

// Where appends a list predicates to the USERUpdate builder.
func (uu *USERUpdate) Where(ps ...predicate.USER) *USERUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetName sets the "name" field.
func (uu *USERUpdate) SetName(s string) *USERUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetIsActivated sets the "isActivated" field.
func (uu *USERUpdate) SetIsActivated(b bool) *USERUpdate {
	uu.mutation.SetIsActivated(b)
	return uu
}

// SetNillableIsActivated sets the "isActivated" field if the given value is not nil.
func (uu *USERUpdate) SetNillableIsActivated(b *bool) *USERUpdate {
	if b != nil {
		uu.SetIsActivated(*b)
	}
	return uu
}

// AddProductIDs adds the "products" edge to the TourProduct entity by IDs.
func (uu *USERUpdate) AddProductIDs(ids ...int) *USERUpdate {
	uu.mutation.AddProductIDs(ids...)
	return uu
}

// AddProducts adds the "products" edges to the TourProduct entity.
func (uu *USERUpdate) AddProducts(t ...*TourProduct) *USERUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.AddProductIDs(ids...)
}

// Mutation returns the USERMutation object of the builder.
func (uu *USERUpdate) Mutation() *USERMutation {
	return uu.mutation
}

// ClearProducts clears all "products" edges to the TourProduct entity.
func (uu *USERUpdate) ClearProducts() *USERUpdate {
	uu.mutation.ClearProducts()
	return uu
}

// RemoveProductIDs removes the "products" edge to TourProduct entities by IDs.
func (uu *USERUpdate) RemoveProductIDs(ids ...int) *USERUpdate {
	uu.mutation.RemoveProductIDs(ids...)
	return uu
}

// RemoveProducts removes "products" edges to TourProduct entities.
func (uu *USERUpdate) RemoveProducts(t ...*TourProduct) *USERUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uu.RemoveProductIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *USERUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *USERUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *USERUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *USERUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *USERUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uu.mutation.IsActivated(); ok {
		_spec.SetField(user.FieldIsActivated, field.TypeBool, value)
	}
	if uu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsTable,
			Columns: []string{user.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tourproduct.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedProductsIDs(); len(nodes) > 0 && !uu.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsTable,
			Columns: []string{user.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tourproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsTable,
			Columns: []string{user.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tourproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// USERUpdateOne is the builder for updating a single USER entity.
type USERUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *USERMutation
}

// SetName sets the "name" field.
func (uuo *USERUpdateOne) SetName(s string) *USERUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetIsActivated sets the "isActivated" field.
func (uuo *USERUpdateOne) SetIsActivated(b bool) *USERUpdateOne {
	uuo.mutation.SetIsActivated(b)
	return uuo
}

// SetNillableIsActivated sets the "isActivated" field if the given value is not nil.
func (uuo *USERUpdateOne) SetNillableIsActivated(b *bool) *USERUpdateOne {
	if b != nil {
		uuo.SetIsActivated(*b)
	}
	return uuo
}

// AddProductIDs adds the "products" edge to the TourProduct entity by IDs.
func (uuo *USERUpdateOne) AddProductIDs(ids ...int) *USERUpdateOne {
	uuo.mutation.AddProductIDs(ids...)
	return uuo
}

// AddProducts adds the "products" edges to the TourProduct entity.
func (uuo *USERUpdateOne) AddProducts(t ...*TourProduct) *USERUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.AddProductIDs(ids...)
}

// Mutation returns the USERMutation object of the builder.
func (uuo *USERUpdateOne) Mutation() *USERMutation {
	return uuo.mutation
}

// ClearProducts clears all "products" edges to the TourProduct entity.
func (uuo *USERUpdateOne) ClearProducts() *USERUpdateOne {
	uuo.mutation.ClearProducts()
	return uuo
}

// RemoveProductIDs removes the "products" edge to TourProduct entities by IDs.
func (uuo *USERUpdateOne) RemoveProductIDs(ids ...int) *USERUpdateOne {
	uuo.mutation.RemoveProductIDs(ids...)
	return uuo
}

// RemoveProducts removes "products" edges to TourProduct entities.
func (uuo *USERUpdateOne) RemoveProducts(t ...*TourProduct) *USERUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return uuo.RemoveProductIDs(ids...)
}

// Where appends a list predicates to the USERUpdate builder.
func (uuo *USERUpdateOne) Where(ps ...predicate.USER) *USERUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *USERUpdateOne) Select(field string, fields ...string) *USERUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated USER entity.
func (uuo *USERUpdateOne) Save(ctx context.Context) (*USER, error) {
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *USERUpdateOne) SaveX(ctx context.Context) *USER {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *USERUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *USERUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *USERUpdateOne) sqlSave(ctx context.Context) (_node *USER, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "USER.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.SetField(user.FieldName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.IsActivated(); ok {
		_spec.SetField(user.FieldIsActivated, field.TypeBool, value)
	}
	if uuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsTable,
			Columns: []string{user.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tourproduct.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedProductsIDs(); len(nodes) > 0 && !uuo.mutation.ProductsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsTable,
			Columns: []string{user.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tourproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ProductsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProductsTable,
			Columns: []string{user.ProductsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tourproduct.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &USER{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
